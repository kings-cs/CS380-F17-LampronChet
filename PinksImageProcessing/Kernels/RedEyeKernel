__kernel void calculateAverage(__global const int *data,  __global int *accumulator, __local int *local_data){
		int index = (get_group_id(0) * get_local_size(0)) + get_local_id(0);
		int local_number = get_local_id(0);
		local_data[local_number] = data[index];
		barrier(CLK_LOCAL_MEM_FENCE);
		
		int distance = 1;
		
		for(int space = (get_local_size(0) / 2); space >= 1; space = space >> 1){
			if(local_number < space){
				int i = distance * (2 * local_number + 1) - 1;
				int j = distance * (2 * local_number + 2) - 1;
				local_data[j] += local_data[i];
			}
			distance = distance << 1;
			barrier(CLK_LOCAL_MEM_FENCE);
		}
		if(local_number == get_local_size(0) - 1){
			accumulator[get_group_id(0)] = local_data[local_number];
		}
}

__kernel void calculateDifference(__global const int *data, __global const int *averages, __global int *result, __global int *differences){
	int index = (get_group_id(0) * get_local_size(0)) + get_local_id(0);
	int average = averages[0];
	int current = data[index];
	int difference = current - average;
	int resultNumber = difference * difference;
	differences[index] = difference;
	result[index] = resultNumber;
}

__kernel void calculateNcc(__global const int *red, __global const int *green,__global const int *blue,__global const int *dimensions, __global const int *templateDiffRed, __global const int *templateDiffGreen, __global const int *templateDiffBlue, __global const int *templateDelta, __global int *nccResult){
	int index = (get_group_id(0) * get_local_size(0)) + get_local_id(0);
	int imageWidth = dimensions[0];
	int imageHeight = dimensions[1];
	int templateWidth = dimensions[3];
	int templateHeight = dimensions[4];
	int halfSizeWidth = templateWidth / 2;	
	int halfSizeHeight = templateHeight / 2;
	int row = index / imageWidth;			
	int col = index % imageWidth;
	int redIndex = red[index];
	int greenIndex = green[index];
	int blueIndex = blue[index];
	int redTotal = 0;
	int greenTotal = 0;
	int blueTotal = 0;
	int usedPixels = 0;
	for(int tempRow = row - halfSizeHeight; tempRow <= row + halfSizeHeight; tempRow++){
		for(int tempCol = col - halfSizeWidth; tempCol <= col + halfSizeWidth; tempCol++){
						int newRow = tempRow;
						int newCol = tempCol;
						if(newRow >= 0 && newCol >= 0 && newRow < imageHeight && newCol < imageWidth) {
							int anIndex = newRow * imageWidth + newCol;
							
							redTotal += red[anIndex];
							greenTotal += green[anIndex];
							blueTotal += blue[anIndex];
							usedPixels++;
						}		
		} 
	}
	int redAvg = redTotal / usedPixels;
	int greenAvg = greenTotal / usedPixels;
	int blueAvg = blueTotal / usedPixels;
	int count = 0;
	float redDiff = 0;
	float greenDiff = 0;
	float blueDiff = 0;
	int counter = 0;
	int redProd = 0;
	int greenProd = 0;
	int blueProd = 0;
	for(int tempRow = row - halfSizeHeight; tempRow <= row + halfSizeHeight; tempRow++){
		for(int tempCol = col - halfSizeWidth; tempCol <= col + halfSizeWidth; tempCol++){
						int newRow = tempRow;
						int newCol = tempCol;
						if(newRow >= 0 && newCol >= 0 && newRow < imageHeight && newCol < imageWidth) {
							int anIndex = newRow * imageWidth + newCol;
							int rDiff = red[anIndex] - redAvg;
							int gDiff = green[anIndex] - greenAvg;
							int bDiff = blue[anIndex] - blueAvg;
							redDiff += rDiff * rDiff;
							greenDiff += gDiff * gDiff;
							blueDiff += bDiff - bDiff;
							redProd += templateDiffRed[count] * rDiff;
							greenProd += templateDiffGreen[count] * gDiff;
							blueProd += templateDiffBlue[count] * bDiff;
						}	
						count++;	
		} 
	}
	float redDelta = templateDelta[0];
	float greenDelta = templateDelta[1];
	float blueDelta = templateDelta[2];
	int redNcc = redProd / ((sqrt(redDelta)) * (sqrt(redDiff)));
	int greenNcc = greenProd / ((sqrt(greenDelta)) * (sqrt(greenDiff)));
	int blueNcc = blueProd / ((sqrt(blueDelta)) * (sqrt(blueDiff)));
	
	int pixelNcc = redNcc * greenNcc * blueNcc;
	
	nccResult[index] = pixelNcc;
	
	
} 