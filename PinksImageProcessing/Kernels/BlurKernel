__kernel void separateChannels(__global const int *sourceData, __global int *redArray, __global int *blueArray, __global int *greenArray, __global int *alphaArray){
	int ALPHA_MASK = 0xff000000;

	int ALPHA_OFFSET = 24;


	int RED_MASK = 0x00ff0000;

	int RED_OFFSET = 16;


	int GREEN_MASK = 0x0000ff00;

	int GREEN_OFFSET = 8;

	int BLUE_MASK = 0x000000ff;

	int BLUE_OFFSET = 0;
	
	int index = (get_group_id(0) * get_local_size(0)) + get_local_id(0);
	int alpha = (sourceData[index] & ALPHA_MASK) >> ALPHA_OFFSET;
	int red = (sourceData[index] & RED_MASK) >> RED_OFFSET;
	int green = (sourceData[index] & GREEN_MASK) >> GREEN_OFFSET;
	int blue = (sourceData[index] & BLUE_MASK) >> BLUE_OFFSET;

	redArray[index] = red;
	blueArray[index] = blue;
	greenArray[index] = green;
	alphaArray[index] = alpha;
}

__kernel void blurChannels(__global int *redArray, __global int *blueArray, __global int *greenArray, __global int *modifiedRedArray, __global int *modifiedBlueArray, __global int *modifiedGreenArray, __global float *stencil, __global int *dimensions){
				int index = (get_group_id(0) * get_local_size(0)) + get_local_id(0);
				int width = dimensions[0];
				int height = dimensions[1];
				
				int row = index / width;
				
				int col = index % width;

				int count = 0;
				float redModify = 0;
				float greenModify = 0;
				float blueModify = 0;
				for (int stenRow = row - 2; stenRow <= row + 2; stenRow++) {
					for (int stenCol = col - 2; stenCol <= col + 2; stenCol++) {
						int newRow = stenRow;
						int newCol = stenCol;
						
						if(newRow < 0) {
							newRow = 0;
						}else if(newRow >= height) {
							newRow = height - 1;
						}
						if(newCol < 0) {
							newCol = 0;
						}else if(newCol >= width) {
							newCol = width - 1;
						}
						
						int anIndex = newRow * width + newCol;
						
						redModify += redArray[anIndex] * stencil[count];
						greenModify += greenArray[anIndex] * stencil[count];
						blueModify += blueArray[anIndex] * stencil[count];
						count++;
						}
				}
				modifiedRedArray[index] = (int) redModify;
				modifiedGreenArray[index] = (int) greenModify;
				modifiedBlueArray[index] = (int) blueModify;
}

__kernel void combineChannels(__global int *alphaArray, __global int *modifiedRedArray, __global int *modifiedBlueArray, __global int *modifiedGreenArray, __global int *resultData){
int ALPHA_MASK = 0xff000000;

	int ALPHA_OFFSET = 24;


	int RED_MASK = 0x00ff0000;

	int RED_OFFSET = 16;


	int GREEN_MASK = 0x0000ff00;

	int GREEN_OFFSET = 8;

	int BLUE_MASK = 0x000000ff;

	int BLUE_OFFSET = 0;
			int i = (get_group_id(0) * get_local_size(0)) + get_local_id(0);
			int newRed = modifiedRedArray[i];
			if(newRed > 255){
				newRed = 255;
			}else if(newRed < 0){
				newRed = 0;
			}
			int newGreen = modifiedGreenArray[i];
			if(newGreen > 255){
				newGreen = 255;
			}else if(newGreen < 0){
				newGreen = 0;
			}
			int newBlue = modifiedBlueArray[i];
			if(newBlue > 255){
				newBlue = 255;
			}else if(newBlue < 0){
				newBlue = 0;
			}
			int alpha = alphaArray[i];
			int newPixel = (alpha << ALPHA_OFFSET) | (newRed << RED_OFFSET) | (newBlue << BLUE_OFFSET)
					| (newGreen << GREEN_OFFSET);

			resultData[i] = newPixel;
}